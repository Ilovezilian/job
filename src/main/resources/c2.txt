//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.kingdee.shr.ats.web.handler;

import com.kingdee.bos.BOSException;
import com.kingdee.bos.Context;
import com.kingdee.bos.metadata.data.SortType;
import com.kingdee.bos.metadata.entity.EntityViewInfo;
import com.kingdee.bos.metadata.entity.FilterInfo;
import com.kingdee.bos.metadata.entity.FilterItemInfo;
import com.kingdee.bos.metadata.entity.SelectorItemInfo;
import com.kingdee.bos.metadata.entity.SorterItemInfo;
import com.kingdee.bos.metadata.query.util.CompareType;
import com.kingdee.bos.util.BOSUuid;
import com.kingdee.eas.base.permission.UserInfo;
import com.kingdee.eas.basedata.org.AdminOrgUnitInfo;
import com.kingdee.eas.basedata.person.PersonCollection;
import com.kingdee.eas.basedata.person.PersonFactory;
import com.kingdee.eas.basedata.person.PersonInfo;
import com.kingdee.eas.common.EASBizException;
import com.kingdee.eas.hr.ats.AtsShiftCollection;
import com.kingdee.eas.hr.ats.AtsShiftFactory;
import com.kingdee.eas.hr.ats.AtsShiftInfo;
import com.kingdee.eas.hr.ats.AtsShiftItemCollection;
import com.kingdee.eas.hr.ats.AtsShiftItemFactory;
import com.kingdee.eas.hr.ats.AtsShiftItemInfo;
import com.kingdee.eas.hr.ats.AttencePolicyCollection;
import com.kingdee.eas.hr.ats.AttencePolicyFactory;
import com.kingdee.eas.hr.ats.AttendanceFileInfo;
import com.kingdee.eas.hr.ats.AttendanceTypeEnum;
import com.kingdee.eas.hr.ats.CardRuleCollection;
import com.kingdee.eas.hr.ats.CardRuleFactory;
import com.kingdee.eas.hr.ats.DayTypeEnum;
import com.kingdee.eas.hr.ats.HolidayPolicySetCollection;
import com.kingdee.eas.hr.ats.HolidayPolicySetFactory;
import com.kingdee.eas.hr.ats.ScheduleShiftInfo;
import com.kingdee.eas.hr.ats.SegIsPunchCardEnum;
import com.kingdee.eas.hr.ats.SegmentUnitEnum;
import com.kingdee.eas.hr.ats.util.AtsDateUtils;
import com.kingdee.eas.hr.emp.PersonPositionInfo;
import com.kingdee.eas.util.app.DbUtil;
import com.kingdee.jdbc.rowset.IRowSet;
import com.kingdee.shr.ats.bill.util.BillBizUtil;
import com.kingdee.shr.ats.web.util.ExportScheduleShiftInfo;
import com.kingdee.shr.ats.web.util.SHRBillUtil;
import com.kingdee.shr.ats.web.util.io.ScheduleShiftFileService;
import com.kingdee.shr.ats.web.util.io.XLSXCovertCSVReader;
import com.kingdee.shr.base.syssetting.app.io.StatusTool;
import com.kingdee.shr.base.syssetting.context.SHRContext;
import com.kingdee.shr.base.syssetting.exception.SHRWebException;
import com.kingdee.shr.base.syssetting.exception.ShrWebBizException;
import com.kingdee.shr.base.syssetting.web.dynamic.util.MD5;
import com.kingdee.shr.base.syssetting.web.handler.CoreHandler;
import com.kingdee.shr.base.syssetting.web.json.JSONUtils;
import com.kingdee.shr.base.syssetting.web.util.UserUtil;
import com.kingdee.util.DateTimeUtils;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.channels.FileChannel;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.xml.sax.SAXException;

public class ScheduleShiftImportEditHandler extends CoreHandler {
    private Context ctx = SHRContext.getInstance().getContext();
    private static Logger logger = Logger.getLogger(ScheduleShiftImportEditHandler.class);
    private static String splitFlag = "=#=";
    private static String dataFlag = "#DateFlag";
    private static String cardRuleFlag = "#cardRuleFlag";
    private static long dayTime = 86400000L;
    Map<String, AdminOrgUnitInfo> adminOrgUnitIdAndObjSet = new HashMap();

    public ScheduleShiftImportEditHandler() {
    }

    private String getWorkTime(Context ctx, String fgroupId) {
        EntityViewInfo evi = new EntityViewInfo();
        FilterInfo fi = new FilterInfo();
        fi.getFilterItems().add(new FilterItemInfo("group.id", fgroupId, CompareType.EQUALS));
        evi.setFilter(fi);
        evi.getSelector().add(new SelectorItemInfo("id"));
        evi.getSelector().add(new SelectorItemInfo("segment"));
        evi.getSelector().add(new SelectorItemInfo("preTime"));
        evi.getSelector().add(new SelectorItemInfo("nextTime"));
        SorterItemInfo st1 = new SorterItemInfo("segment");
        st1.setSortType(SortType.ASCEND);
        evi.getSorter().add(st1);
        AtsShiftItemCollection atsShiftItemCollection = null;

        try {
            atsShiftItemCollection = AtsShiftItemFactory.getLocalInstance(ctx).getAtsShiftItemCollection(evi);
        } catch (BOSException var11) {
            var11.printStackTrace();
        }

        if (atsShiftItemCollection != null && atsShiftItemCollection.size() > 0) {
            int size = atsShiftItemCollection.size();
            String workTime = "";

            for(int i = 0; i < size; ++i) {
                AtsShiftItemInfo tempInfo = atsShiftItemCollection.get(i);
                if (i == 0) {
                    workTime = workTime + tempInfo.getPreTime() + " - ";
                }

                if (i == size - 1) {
                    workTime = workTime + tempInfo.getNextTime();
                }
            }

            return workTime;
        } else {
            return null;
        }
    }

    public String getShiftItemsInfoAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {
        String shiftItemId = request.getParameter("shiftItemId");
        String workTime = this.getWorkTime(this.ctx, shiftItemId);
        Map<String, String> map = new HashMap();
        map.put("workTime", workTime);

        try {
            JSONUtils.writeJson(response, map);
        } catch (SHRWebException var8) {
            var8.printStackTrace();
        }

        return null;
    }

    public String importDataAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception {
        StatusTool.initStatus("com.kingdee.eas.hr.ats.app.ScheduleShift");
        String contentType = request.getContentType();
        Map<String, Object> map = null;
        String exceltFullPath = null;
        ScheduleShiftFileService importInfo = null;

        try {
            if (contentType != null && contentType.indexOf("multipart/form-data") != -1) {
                MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)request;
                Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
                Iterator var11 = fileMap.entrySet().iterator();

                while(var11.hasNext()) {
                    Entry<String, MultipartFile> entity = (Entry)var11.next();
                    MultipartFile multipartFile = (MultipartFile)entity.getValue();
                    String serverPath = UserUtil.getUserTempDirAbsolutePath(request.getSession());
                    File newFolder = new File(serverPath);
                    newFolder.mkdir();
                    String fileName = multipartFile.getOriginalFilename();
                    exceltFullPath = serverPath + fileName;
                    new File(serverPath, fileName);
                    List<String[]> sheetData = null;
                    HashMap excelData = null;
                    if (fileName.endsWith("xls")) {
                        throw new SHRWebException("请上传.xlsx格式文件");
                    }

                    if (!fileName.endsWith(".xlsx")) {
                        throw new SHRWebException("上传文件格式不对，请检查！");
                    }

                    excelData = this.handlerExcel(request, multipartFile);
                    Iterator iter = excelData.entrySet().iterator();
                    importInfo = new ScheduleShiftFileService();
                    ScheduleShiftFileService.IMPORTCOUNT.incrementAndGet();
                    importInfo.preScheduleShiftData();

                    while(iter.hasNext()) {
                        Entry entry = (Entry)iter.next();
                        String sheetName = (String)entry.getKey();
                        if (!"hiddenSheet".equals(sheetName)) {
                            sheetData = (List)entry.getValue();
                            if (sheetData != null) {
                                importInfo.initSheetData(sheetName, sheetData);
                                map = importInfo.generateErrorReport(exceltFullPath, sheetName, importInfo.importScheduleShiftData());
                            }
                        }
                    }
                }

                importInfo.clearData();
            }
        } finally {
            ScheduleShiftFileService.IMPORTCOUNT.decrementAndGet();
        }

        importInfo = null;
        JSONUtils.writeJson(response, map);
        return null;
    }

    public String deleteFileAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {
        String deleteFile = request.getParameter("errorPath");
        if (!StringUtils.isEmpty(deleteFile)) {
            File file = new File(deleteFile);
            file.delete();
        }

        return null;
    }

    private String generateFileName(String title) {
        return title + "_" + DateTimeUtils.format(new Date(), "yyyyMMddHHmmss") + ".xlsx";
    }

    private int setPersonInf(String personId, String names, List<String[]> dataList, Map<String, String> numberIdMap) {
        String[] ids = personId.split(",");
        dataList.add(ids);
        dataList.add(names.split(","));
        String orgNums = "";
        String orgNames = "";
        String[] var11 = ids;
        int var10 = ids.length;

        for(int var9 = 0; var9 < var10; ++var9) {
            String id = var11[var9];
            PersonPositionInfo personPositionInfo = SHRBillUtil.getAdminOrgUnitByPersonNumber(id.trim());
            if (personPositionInfo != null) {
                AdminOrgUnitInfo orgInfo = personPositionInfo.getPersonDep();
                numberIdMap.put(id.trim(), personPositionInfo.getPerson().getId().toString());
                if (orgInfo != null) {
                    orgNames = orgNames + orgInfo.getName().trim() + ",";
                    orgNums = orgNums + orgInfo.getNumber().trim() + ",";
                } else {
                    orgNames = orgNames + " ,";
                    orgNums = orgNums + " ,";
                }
            }
        }

        if (!StringUtils.isEmpty(orgNums)) {
            dataList.add(orgNums.split(","));
        } else {
            dataList.add(new String[]{""});
        }

        if (!StringUtils.isEmpty(orgNames)) {
            dataList.add(orgNames.split(","));
        } else {
            dataList.add(new String[]{""});
        }

        return ids.length;
    }

    private int setOrgName(List<String[]> dataList, String longNum, String orgName, Map<String, String> numberIdMap) {
        int typeRows = true;
        int typeRows;
        if (StringUtils.isEmpty(longNum)) {
            typeRows = 1;
            dataList.add(new String[]{""});
            dataList.add(new String[]{""});
            dataList.add(new String[]{""});
            dataList.add(new String[]{""});
        } else {
            Map<String, String> map = this.getPersonBylongNum(longNum);
            if (map != null && map.size() > 0) {
                String[] numbers = ((String)map.get("number")).split(",");
                String[] ids = ((String)map.get("id")).split(",");
                int i = 0;

                for(int len = numbers.length; i < len; ++i) {
                    numberIdMap.put(numbers[i], ids[i]);
                }

                typeRows = numbers.length;
                dataList.add(numbers);
                dataList.add(((String)map.get("name")).split(","));
                dataList.add(((String)map.get("orgNums")).split(","));
                dataList.add(((String)map.get("orgName")).split(","));
            } else {
                typeRows = 1;
                dataList.add(new String[]{""});
                dataList.add(new String[]{""});
                dataList.add(new String[]{""});
                dataList.add(new String[]{""});
            }
        }

        return typeRows;
    }

    public void downloadTemplateAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws BOSException, EASBizException {
        List<String[]> dataList = new ArrayList();
        Map<String, String> numberIdMap = new HashMap();
        String[] empty = new String[]{""};
        int typeRows = false;
        String personId = this.getFormStr(request, "personId");
        String longNum = this.getFormStr(request, "longNum");
        String minAttendDate;
        int typeRows;
        if (!StringUtils.isEmpty(personId)) {
            minAttendDate = this.getFormStr(request, "personName");
            typeRows = this.setPersonInf(personId, minAttendDate, dataList, numberIdMap);
        } else {
            minAttendDate = this.getFormStr(request, "orgName");
            typeRows = this.setOrgName(dataList, longNum, minAttendDate, numberIdMap);
        }

        minAttendDate = this.getFormStr(request, "min");
        String maxAttendDate = this.getFormStr(request, "max");
        Date begin = null;
        Date end = null;
        begin = AtsDateUtils.stringToShortDate(minAttendDate);
        end = AtsDateUtils.stringToShortDate(maxAttendDate);
        dataList.add(new String[]{dataFlag, minAttendDate, maxAttendDate});
        ScheduleShiftInfo shiftInfo = new ScheduleShiftInfo();
        shiftInfo.getDayType();
        List list = DayTypeEnum.getEnumList();
        String names;
        if (list != null && list.size() > 0) {
            names = list.toString();
            names = names.substring(1, names.length() - 1);
            dataList.add(("true," + names).split(","));
        }

        names = this.getFormStr(request, "name");
        dataList.add(("true" + splitFlag + " " + splitFlag + names).split(splitFlag));
        String attendNames = this.getAttencePolicyName();
        if (!StringUtils.isEmpty(attendNames)) {
            dataList.add(("true" + splitFlag + attendNames).split(splitFlag));
        } else {
            dataList.add(empty);
        }

        String holidayNames = this.getHolidayPolicyName();
        if (!StringUtils.isEmpty(holidayNames)) {
            dataList.add(("true" + splitFlag + holidayNames).split(splitFlag));
        } else {
            dataList.add(empty);
        }

        String cardNames = this.getCardRuleName();
        String[] tempCardNames = cardNames.split(splitFlag);
        long cardNamesCharacterLength = 0L;

        for(int i = 0; i < tempCardNames.length; ++i) {
            cardNamesCharacterLength += (long)(tempCardNames[i].length() + 1);
        }

        if (!StringUtils.isEmpty(cardNames)) {
            if (cardNamesCharacterLength < 255L) {
                dataList.add(("true" + splitFlag + cardNames).split(splitFlag));
            } else {
                dataList.add((cardRuleFlag + splitFlag + cardNames).split(splitFlag));
            }
        } else {
            dataList.add(empty);
        }

        List<AttendanceTypeEnum> attendanceTypeList = AttendanceTypeEnum.getEnumList();
        int len;
        if (attendanceTypeList != null) {
            int len = attendanceTypeList.size();
            String strList = "";

            for(len = 0; len < len; ++len) {
                strList = strList + ((AttendanceTypeEnum)attendanceTypeList.get(len)).getAlias().toString() + ",";
            }

            strList = strList.substring(0, strList.length() - 1);
            dataList.add((" ," + strList).split(","));
        }

        List<SegmentUnitEnum> referDayTypeList = SegmentUnitEnum.getEnumList();
        int simpleRows;
        if (referDayTypeList != null && referDayTypeList.size() > 0) {
            int len = referDayTypeList.size();
            String strList = "";

            for(simpleRows = 0; simpleRows < len; ++simpleRows) {
                strList = strList + ((SegmentUnitEnum)referDayTypeList.get(simpleRows)).getAlias().toString() + ",";
            }

            strList = strList.substring(0, strList.length() - 1);
            dataList.add((" ," + strList).split(","));
        }

        List<SegIsPunchCardEnum> isPunchCardList = SegIsPunchCardEnum.getEnumList();
        if (isPunchCardList != null && isPunchCardList.size() > 0) {
            len = isPunchCardList.size();
            String strList = "";

            for(int i = 0; i < len; ++i) {
                strList = strList + ((SegIsPunchCardEnum)isPunchCardList.get(i)).getAlias().toString() + ",";
            }

            strList = strList.substring(0, strList.length() - 1);
            dataList.add((" ," + strList).split(","));
        }

        boolean isNeedWorkCalendar = false;
        if (StringUtils.isNotEmpty(longNum) || StringUtils.isNotEmpty(personId)) {
            this.adminOrgUnitIdAndObjSet = getCurrentRangeAdminOrgUnitMap(this.ctx, longNum);
            isNeedWorkCalendar = true;
        }

        simpleRows = (int)((end.getTime() - begin.getTime()) / dayTime + 1L);
        ExportScheduleShiftInfo export = new ExportScheduleShiftInfo(typeRows, simpleRows, names.split(splitFlag)[0], begin, end, isNeedWorkCalendar);

        try {
            export.outputExecl(request, response, dataList, this.ctx, numberIdMap, this.adminOrgUnitIdAndObjSet);
        } catch (IOException var33) {
            var33.printStackTrace();
        } finally {
            this.adminOrgUnitIdAndObjSet = null;
            if (export != null) {
                export.clearData();
            }

            export = null;
        }

    }

    public static Map<String, AdminOrgUnitInfo> getCurrentRangeAdminOrgUnitMap(Context ctx, String orgLongNum) {
        UserInfo currentUserInfo = (UserInfo)ctx.get("UserInfo");
        String userId = currentUserInfo.getId().toString();
        Map<String, AdminOrgUnitInfo> adminOrgUnitIdAndObjSet = null;
        if (!StringUtils.isEmpty(userId)) {
            StringBuffer sqlSelect = new StringBuffer();
            sqlSelect.append(" SELECT T.FID,T.FNUMBER,T.FNAME_L2 FROM T_ORG_Admin t ");
            sqlSelect.append(" INNER JOIN  T_PM_OrgRange RANGE ");
            sqlSelect.append(" ON t.FID = RANGE.FOrgID ");
            sqlSelect.append("    WHERE RANGE.FType = 20  \n");
            sqlSelect.append("    and RANGE.fuserId = '" + userId + "' ");
            sqlSelect.append("    and t.FISSTARTSHR = 1 ");
            String[] longnumArr;
            if (!StringUtils.isEmpty(orgLongNum)) {
                sqlSelect.append("  AND ");
                StringBuffer sqlinner = new StringBuffer();
                sqlinner.append(" ( ");
                longnumArr = orgLongNum.split("@");

                for(int i = 0; i < longnumArr.length; ++i) {
                    sqlinner.append("  t.flongnumber = '" + longnumArr[i] + "' or ");
                    sqlinner.append("  t.flongnumber like '" + longnumArr[i] + "!%' or ");
                }

                if (sqlinner.length() > 0 && sqlinner.toString().trim().endsWith("or")) {
                    sqlinner.delete(sqlinner.lastIndexOf("or"), sqlinner.length());
                }

                sqlinner.append(" ) ");
                sqlSelect.append(sqlinner.toString());
            }

            try {
                IRowSet rowSet = DbUtil.executeQuery(ctx, sqlSelect.toString());
                if (rowSet != null && rowSet.size() > 0) {
                    adminOrgUnitIdAndObjSet = new HashMap();
                    longnumArr = null;

                    while(rowSet.next()) {
                        AdminOrgUnitInfo adminOrgUnit = new AdminOrgUnitInfo();
                        adminOrgUnit.setId(BOSUuid.read(rowSet.getString("FID")));
                        adminOrgUnit.setNumber(rowSet.getString("FNUMBER"));
                        adminOrgUnit.setName(rowSet.getString("FNAME_L2"));
                        adminOrgUnitIdAndObjSet.put(rowSet.getString("FID"), adminOrgUnit);
                    }
                }
            } catch (Exception var9) {
                var9.printStackTrace();
            }
        }

        return adminOrgUnitIdAndObjSet;
    }

    public void downloadTempVerticalAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws BOSException, EASBizException, ShrWebBizException {
        List<String[]> dataList = new ArrayList();
        String[] dataStrings = new String[100];
        String[] dataColNames = new String[100];
        dataColNames[0] = "员工编码";
        dataColNames[1] = "姓名";
        dataColNames[2] = "组织编码";
        dataColNames[3] = "考勤组织";
        String[] numbers = new String[200];
        String[] nameString = new String[200];
        String[] orgNames = new String[200];
        String[] orgNums = new String[200];
        String[] var10000 = new String[]{""};
        int typeRows = false;
        String personId = this.getFormStr(request, "personId");
        String personNames = this.getFormStr(request, "personName");
        String longNum = this.getFormStr(request, "longNum");
        this.getFormStr(request, "orgName");
        String shiftNames;
        IRowSet rowSet;
        int typeRows;
        if (!StringUtils.isEmpty(personId)) {
            String[] ids = personId.split(",");
            typeRows = ids.length;
            numbers = new String[typeRows];
            nameString = new String[typeRows];
            orgNames = new String[typeRows];
            orgNums = new String[typeRows];
            numbers = ids;
            nameString = personNames.split(",");

            for(int i = 0; i < typeRows; ++i) {
                shiftNames = "select ad.fname_l2 as orgName, ad.fnumber as orgNum from T_ORG_Admin  ad inner join T_HR_PersonPosition   ppt on ad.fid = ppt.fpersondep inner join t_bd_person  per  on per.fid = ppt.fpersonid where per.fnumber = '" + ids[i] + "'";
                rowSet = null;
                rowSet = DbUtil.executeQuery(this.ctx, shiftNames);

                try {
                    while(rowSet.next()) {
                        orgNames[i] = rowSet.getString("orgName");
                        orgNums[i] = rowSet.getString("orgNum");
                    }
                } catch (SQLException var36) {
                    var36.printStackTrace();
                }
            }
        } else if (longNum == null) {
            typeRows = 1;
            numbers[0] = "";
            nameString[0] = "";
            orgNames[0] = "";
            orgNums[0] = "";
        } else {
            Map<String, String> map = this.getPersonBylongNum(longNum);
            if (map != null && map.size() > 0) {
                numbers = ((String)map.get("number")).split(",");
                nameString = ((String)map.get("name")).split(",");
                orgNames = ((String)map.get("orgName")).split(",");
                orgNums = ((String)map.get("orgNums")).split(",");
            }

            typeRows = numbers.length;
        }

        String minAttendDate = this.getFormStr(request, "min");
        String maxAttendDate = this.getFormStr(request, "max");
        shiftNames = this.getFormStr(request, "name");
        rowSet = null;
        Date end = null;
        Date begin = AtsDateUtils.stringToShortDate(minAttendDate);
        end = AtsDateUtils.stringToShortDate(maxAttendDate);
        List dateList = AtsDateUtils.getDateList(minAttendDate, maxAttendDate);
        int dateLength = dateList.size();
        if (dateLength > dataColNames.length) {
            throw new ShrWebBizException("选择的日期太多！");
        } else {
            String number;
            for(int i = 0; i < dateLength; ++i) {
                String dateStr = (String)dateList.get(i);
                number = AtsDateUtils.getWeekOfDate(dateStr);
                dataColNames[i + 4] = dateStr + "(" + number + ")";
            }

            String colNameDateString = StringUtils.join(dataColNames, ",");

            for(short row = 0; row < typeRows; ++row) {
                number = numbers[row];
                String name = nameString[row];
                String orgNum = orgNums[row];
                String orgNa = orgNames[row];
                String[] xDataRowStrings = new String[dateLength + 4];
                xDataRowStrings[0] = number;
                xDataRowStrings[1] = name;
                xDataRowStrings[2] = orgNum;
                xDataRowStrings[3] = orgNa;
                dataList.add(xDataRowStrings);
            }

            boolean isNeedWorkCalendar = false;
            if (StringUtils.isNotEmpty(longNum) || StringUtils.isNotEmpty(personId)) {
                this.adminOrgUnitIdAndObjSet = getCurrentRangeAdminOrgUnitMap(this.ctx, longNum);
                isNeedWorkCalendar = true;
            }

            ExportScheduleShiftInfo export = new ExportScheduleShiftInfo(typeRows, colNameDateString.split(","), shiftNames, begin, end, isNeedWorkCalendar);

            try {
                export.outputExeclVertical(request, response, dataList, this.ctx, this.adminOrgUnitIdAndObjSet);
            } catch (IOException var34) {
                var34.printStackTrace();
            } finally {
                this.adminOrgUnitIdAndObjSet = null;
                if (export != null) {
                    export.clearData();
                }

                number = null;
            }

        }
    }

    private String getFormStr(HttpServletRequest request, String name) {
        String value = request.getParameter(name);
        if (value == null) {
            return value;
        } else {
            try {
                return new String(value.getBytes("iso8859-1"), "utf-8");
            } catch (UnsupportedEncodingException var5) {
                var5.printStackTrace();
                return value;
            }
        }
    }

    private String getDateType(String attendDatestr, String number, String shiftNames) throws BOSException, SQLException {
        int dayType = -9;
        IRowSet rowSet = null;
        String dateTypeStr;
        if (StringUtils.isEmpty(number)) {
            dateTypeStr = "select items.fdayType as fdaytype,fid as id from T_HR_ATS_WorkCalendarItem as items where items.fcalendarGroupId in (select fid from T_HR_ATS_WorkCalendar where fisdefault = 1) and fdate = '" + attendDatestr + "'";
            rowSet = DbUtil.executeQuery(this.ctx, dateTypeStr);
        } else {
            AttendanceFileInfo fileInfo = BillBizUtil.getAttendanceFileInfoByDate(this.ctx, number, attendDatestr);
            String personId = null;
            PersonCollection personCollection = PersonFactory.getLocalInstance(this.ctx).getPersonCollection("where number = '" + number + "'");
            if (personCollection.size() > 0) {
                PersonInfo person = personCollection.get(0);
                personId = person.getId().toString();
            }

            StringBuilder sqlSb = new StringBuilder();
            sqlSb.append("      select attfile.fattendcenterid,attfile.fattencepolicyid,policy.FWORKCALENDARID,attwork.fbegindate,attwork.fenddate ,item.fdate,item.fdaytype \n").append("        from T_HR_ATS_AttendanceFile attfile \n").append("  inner join  t_hr_ats_attencepolicy policy on policy.fid = attfile.fattencepolicyid \n").append("  inner join  t_hr_ats_workcalendar attwork on attwork.fid = policy.FWORKCALENDARID \n").append("  inner join  t_hr_ats_workcalendaritem item on item.fcalendargroupid = attwork.fid \n").append("       where attfile.FATTENDFILESTATE = '1' \n").append("         and  TO_CHAR(item.fdate,'YYYY-MM-DD')='" + attendDatestr + "' and attfile.fproposerid='" + personId + "' \n");
            if (fileInfo != null) {
                String fileId = fileInfo.getId().toString();
                sqlSb.append(" and attfile.fid = '" + fileId + "'");
            }

            rowSet = DbUtil.executeQuery(this.ctx, sqlSb.toString());
        }

        if (rowSet.next()) {
            dayType = rowSet.getInt("fdaytype");
        }

        dateTypeStr = "";
        if (dayType >= 0) {
            if (dayType == 1) {
                dateTypeStr = "休息";
            } else if (dayType == 2) {
                dateTypeStr = "法定假";
            } else {
                dateTypeStr = shiftNames.split(splitFlag)[0];
            }
        }

        return dateTypeStr;
    }

    private Map<String, String> getPersonBylongNum(String longNum) {
        StringBuffer oql = new StringBuffer();
        oql.append("select distinct person.fid,person.fnumber,person.fname_l2,attenceFile.fid, org.fnumber,org.fdisplayname_l2 \n");
        oql.append("from t_bd_person person inner join t_hr_ats_attendancefile attenceFile on person.fid = attenceFile.fproposerid\n");
        oql.append("inner join t_org_admin org on org.fid = attenceFile.fadminorgunitid \n");
        oql.append(" WHERE attenceFile.FAttendFileState = '1' AND attenceFile.FIsAttendance = '1'\n");
        oql.append(" AND org.FLongNumber LIKE '" + longNum.trim() + "%'\n");
        IRowSet rowSet = null;

        try {
            rowSet = DbUtil.executeQuery(this.ctx, oql.toString());
            if (rowSet != null) {
                Map<String, String> map = new HashMap();
                String id = "";
                String numbers = "";
                String names = "";
                String fileIds = "";
                String orgNames = "";

                String orgNums;
                for(orgNums = ""; rowSet.next(); orgNames = orgNames + rowSet.getString(6) + ",") {
                    id = id + rowSet.getString(1) + ",";
                    numbers = numbers + rowSet.getString(2) + ",";
                    names = names + rowSet.getString(3) + ",";
                    fileIds = fileIds + rowSet.getString(4) + ",";
                    orgNums = orgNums + rowSet.getString(5) + ",";
                }

                map.put("id", id);
                map.put("number", numbers);
                map.put("name", names);
                map.put("fileId", fileIds);
                map.put("orgName", orgNames);
                map.put("orgNums", orgNums);
                return map;
            }
        } catch (Exception var11) {
            var11.printStackTrace();
        }

        return null;
    }

    public String getDefaultShiftAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {
        EntityViewInfo evi = new EntityViewInfo();
        evi.getSelector().add(new SelectorItemInfo("id"));
        evi.getSelector().add(new SelectorItemInfo("name"));
        evi.getSelector().add(new SelectorItemInfo("number"));
        FilterInfo fi = new FilterInfo();
        fi.getFilterItems().add(new FilterItemInfo("isDefault", true, CompareType.EQUALS));
        evi.setFilter(fi);
        AtsShiftCollection shiftSet = null;

        try {
            shiftSet = AtsShiftFactory.getLocalInstance(this.ctx).getAtsShiftCollection(evi);
        } catch (BOSException var14) {
            var14.printStackTrace();
        }

        if (shiftSet != null && shiftSet.size() > 0) {
            AtsShiftInfo atsShift = shiftSet.get(0);
            String workTime = this.getWorkTime(this.ctx, atsShift.getId().toString());
            String name = atsShift.getName();
            String number = atsShift.getNumber();
            Map<String, String> map = new HashMap();
            map.put("workTime", workTime);
            map.put("name", name);
            map.put("number", number);

            try {
                JSONUtils.writeJson(response, map);
            } catch (SHRWebException var13) {
                var13.printStackTrace();
            }
        }

        return null;
    }

    private String getAttencePolicyName() {
        AttencePolicyCollection policySet = null;
        EntityViewInfo evi = new EntityViewInfo();
        evi.getSelector().add(new SelectorItemInfo("id"));
        evi.getSelector().add(new SelectorItemInfo("name"));

        try {
            policySet = AttencePolicyFactory.getLocalInstance(this.ctx).getAttencePolicyCollection(evi);
        } catch (BOSException var5) {
            var5.printStackTrace();
        }

        if (policySet != null && policySet.size() > 0) {
            String policyNames = "";

            for(int i = 0; i < policySet.size(); ++i) {
                policyNames = policyNames + policySet.get(i).getName() + splitFlag;
            }

            return policyNames;
        } else {
            return null;
        }
    }

    private String getHolidayPolicyName() {
        EntityViewInfo evi = new EntityViewInfo();
        evi.getSelector().add(new SelectorItemInfo("id"));
        evi.getSelector().add(new SelectorItemInfo("name"));
        HolidayPolicySetCollection policySet = null;

        try {
            policySet = HolidayPolicySetFactory.getLocalInstance(this.ctx).getHolidayPolicySetCollection(evi);
        } catch (BOSException var5) {
            var5.printStackTrace();
        }

        if (policySet != null && policySet.size() > 0) {
            String policyNames = "";

            for(int i = 0; i < policySet.size(); ++i) {
                policyNames = policyNames + policySet.get(i).getName() + splitFlag;
            }

            return policyNames;
        } else {
            return null;
        }
    }

    private String getCardRuleName() {
        EntityViewInfo evi = new EntityViewInfo();
        evi.getSelector().add(new SelectorItemInfo("id"));
        evi.getSelector().add(new SelectorItemInfo("name"));
        CardRuleCollection cardSet = null;

        try {
            cardSet = CardRuleFactory.getLocalInstance(this.ctx).getCardRuleCollection(evi);
        } catch (BOSException var5) {
            var5.printStackTrace();
        }

        if (cardSet != null && cardSet.size() > 0) {
            String cardNames = "";

            for(int i = 0; i < cardSet.size(); ++i) {
                cardNames = cardNames + cardSet.get(i).getName() + splitFlag;
            }

            return cardNames;
        } else {
            return null;
        }
    }

    public String downloadErrorAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception {
        String fileName = "";
        String error_path = request.getParameter("errorPath");
        if (StringUtils.isNotEmpty(error_path)) {
            try {
                if (error_path.endsWith(".xls")) {
                    fileName = fileName + "错误报告.xls";
                } else {
                    if (!error_path.endsWith(".xlsx")) {
                        throw new SHRWebException("下载文件格式不对！");
                    }

                    fileName = fileName + "错误报告.xlsx";
                }

                response.setHeader("Content-disposition", "attachment; filename=" + URLEncoder.encode(fileName, "utf-8"));
                response.setContentType("application/msexcel");
                OutputStream out = response.getOutputStream();
                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(error_path));
                byte[] buffer = new byte[5120];

                int len;
                while((len = bis.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }

                out.flush();
                out.close();
            } catch (Exception var10) {
                logger.error(var10.getMessage(), var10);
                throw new SHRWebException(var10.getMessage(), var10);
            }
        }

        return null;
    }

    public HashMap handlerExcel(HttpServletRequest request, MultipartFile multFile) throws SHRWebException {
        File dir = new File(UserUtil.getUserTempDirAbsolutePath(request.getSession()));
        if (!dir.exists()) {
            dir.mkdirs();
        }

        String title = multFile.getOriginalFilename();
        String fileName = this.generateFileName(title);
        String realFileName = MD5.md5Hash(fileName);
        File file = new File(dir, realFileName);
        HashMap excelData = null;

        try {
            FileOutputStream fileOut = new FileOutputStream(file);
            FileChannel fileChannel = fileOut.getChannel();
            fileOut.write(multFile.getBytes());
            fileOut.close();
            excelData = XLSXCovertCSVReader.readerExcel(dir + "/" + realFileName, (String)null, 0);
            file.delete();
            return excelData;
        } catch (FileNotFoundException var11) {
            throw new SHRWebException(var11.getMessage(), var11);
        } catch (IOException var12) {
            throw new SHRWebException(var12.getMessage(), var12);
        } catch (OpenXML4JException var13) {
            throw new SHRWebException(var13.getMessage(), var13);
        } catch (ParserConfigurationException var14) {
            throw new SHRWebException(var14.getMessage(), var14);
        } catch (SAXException var15) {
            throw new SHRWebException(var15.getMessage(), var15);
        }
    }

    public String getConcurrentImportCountAction(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {
        Map<String, Object> result = new HashMap();
        int importCount = ScheduleShiftFileService.IMPORTCOUNT.get();
        result.put("CONCURRENT_IMPORT_COUNT", importCount);

        try {
            JSONUtils.writeJson(response, result);
        } catch (Exception var7) {
            var7.printStackTrace();
        }

        return null;
    }
}
